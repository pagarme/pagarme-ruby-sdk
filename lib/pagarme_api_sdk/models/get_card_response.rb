# pagarme_api_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module PagarmeApiSdk
  # Response object for getting a credit card
  class GetCardResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_four_digits

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :brand

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :holder_name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :exp_month

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :exp_year

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :updated_at

    # TODO: Write general description for this method
    # @return [GetBillingAddressResponse]
    attr_accessor :billing_address

    # TODO: Write general description for this method
    # @return [GetCustomerResponse]
    attr_accessor :customer

    # TODO: Write general description for this method
    # @return [Hash of String]
    attr_accessor :metadata

    # Card type
    # @return [String]
    attr_accessor :type

    # Document number for the card's holder
    # @return [String]
    attr_accessor :holder_document

    # Document number for the card's holder
    # @return [DateTime]
    attr_accessor :deleted_at

    # First six digits
    # @return [String]
    attr_accessor :first_six_digits

    # First six digits
    # @return [String]
    attr_accessor :label

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['last_four_digits'] = 'last_four_digits'
      @_hash['brand'] = 'brand'
      @_hash['holder_name'] = 'holder_name'
      @_hash['exp_month'] = 'exp_month'
      @_hash['exp_year'] = 'exp_year'
      @_hash['status'] = 'status'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash['billing_address'] = 'billing_address'
      @_hash['customer'] = 'customer'
      @_hash['metadata'] = 'metadata'
      @_hash['type'] = 'type'
      @_hash['holder_document'] = 'holder_document'
      @_hash['deleted_at'] = 'deleted_at'
      @_hash['first_six_digits'] = 'first_six_digits'
      @_hash['label'] = 'label'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        last_four_digits
        brand
        holder_name
        exp_month
        exp_year
        status
        created_at
        updated_at
        billing_address
        customer
        metadata
        type
        holder_document
        deleted_at
        first_six_digits
        label
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        id
        last_four_digits
        brand
        holder_name
        exp_month
        exp_year
        status
        created_at
        updated_at
        billing_address
        customer
        metadata
        type
        holder_document
        deleted_at
        first_six_digits
        label
      ]
    end

    def initialize(id = SKIP,
                   last_four_digits = SKIP,
                   brand = SKIP,
                   holder_name = SKIP,
                   exp_month = SKIP,
                   exp_year = SKIP,
                   status = SKIP,
                   created_at = SKIP,
                   updated_at = SKIP,
                   billing_address = SKIP,
                   customer = SKIP,
                   metadata = SKIP,
                   type = SKIP,
                   holder_document = SKIP,
                   deleted_at = SKIP,
                   first_six_digits = SKIP,
                   label = SKIP)
      @id = id unless id == SKIP
      @last_four_digits = last_four_digits unless last_four_digits == SKIP
      @brand = brand unless brand == SKIP
      @holder_name = holder_name unless holder_name == SKIP
      @exp_month = exp_month unless exp_month == SKIP
      @exp_year = exp_year unless exp_year == SKIP
      @status = status unless status == SKIP
      @created_at = created_at unless created_at == SKIP
      @updated_at = updated_at unless updated_at == SKIP
      @billing_address = billing_address unless billing_address == SKIP
      @customer = customer unless customer == SKIP
      @metadata = metadata unless metadata == SKIP
      @type = type unless type == SKIP
      @holder_document = holder_document unless holder_document == SKIP
      @deleted_at = deleted_at unless deleted_at == SKIP
      @first_six_digits = first_six_digits unless first_six_digits == SKIP
      @label = label unless label == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      last_four_digits =
        hash.key?('last_four_digits') ? hash['last_four_digits'] : SKIP
      brand = hash.key?('brand') ? hash['brand'] : SKIP
      holder_name = hash.key?('holder_name') ? hash['holder_name'] : SKIP
      exp_month = hash.key?('exp_month') ? hash['exp_month'] : SKIP
      exp_year = hash.key?('exp_year') ? hash['exp_year'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      updated_at = if hash.key?('updated_at')
                     (DateTimeHelper.from_rfc3339(hash['updated_at']) if hash['updated_at'])
                   else
                     SKIP
                   end
      billing_address = GetBillingAddressResponse.from_hash(hash['billing_address']) if
        hash['billing_address']
      customer = GetCustomerResponse.from_hash(hash['customer']) if hash['customer']
      metadata = hash.key?('metadata') ? hash['metadata'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      holder_document =
        hash.key?('holder_document') ? hash['holder_document'] : SKIP
      deleted_at = if hash.key?('deleted_at')
                     (DateTimeHelper.from_rfc3339(hash['deleted_at']) if hash['deleted_at'])
                   else
                     SKIP
                   end
      first_six_digits =
        hash.key?('first_six_digits') ? hash['first_six_digits'] : SKIP
      label = hash.key?('label') ? hash['label'] : SKIP

      # Create object from extracted values.
      GetCardResponse.new(id,
                          last_four_digits,
                          brand,
                          holder_name,
                          exp_month,
                          exp_year,
                          status,
                          created_at,
                          updated_at,
                          billing_address,
                          customer,
                          metadata,
                          type,
                          holder_document,
                          deleted_at,
                          first_six_digits,
                          label)
    end

    def to_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_updated_at
      DateTimeHelper.to_rfc3339(updated_at)
    end

    def to_deleted_at
      DateTimeHelper.to_rfc3339(deleted_at)
    end
  end
end
