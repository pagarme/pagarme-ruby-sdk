# pagarme_api_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module PagarmeApiSdk
  # Response object for getting an order item
  class GetOrderItemResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Id
    # @return [String]
    attr_accessor :id

    # Id
    # @return [String]
    attr_accessor :type

    # Id
    # @return [String]
    attr_accessor :description

    # Id
    # @return [Integer]
    attr_accessor :amount

    # Id
    # @return [Integer]
    attr_accessor :quantity

    # Category
    # @return [String]
    attr_accessor :category

    # Code
    # @return [String]
    attr_accessor :code

    # Code
    # @return [String]
    attr_accessor :status

    # Code
    # @return [DateTime]
    attr_accessor :created_at

    # Code
    # @return [DateTime]
    attr_accessor :updated_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['type'] = 'type'
      @_hash['description'] = 'description'
      @_hash['amount'] = 'amount'
      @_hash['quantity'] = 'quantity'
      @_hash['category'] = 'category'
      @_hash['code'] = 'code'
      @_hash['status'] = 'status'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        type
        description
        amount
        quantity
        category
        code
        status
        created_at
        updated_at
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        id
        type
        description
        amount
        quantity
        category
        code
        status
        created_at
        updated_at
      ]
    end

    def initialize(id = SKIP, type = SKIP, description = SKIP, amount = SKIP,
                   quantity = SKIP, category = SKIP, code = SKIP, status = SKIP,
                   created_at = SKIP, updated_at = SKIP)
      @id = id unless id == SKIP
      @type = type unless type == SKIP
      @description = description unless description == SKIP
      @amount = amount unless amount == SKIP
      @quantity = quantity unless quantity == SKIP
      @category = category unless category == SKIP
      @code = code unless code == SKIP
      @status = status unless status == SKIP
      @created_at = created_at unless created_at == SKIP
      @updated_at = updated_at unless updated_at == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      category = hash.key?('category') ? hash['category'] : SKIP
      code = hash.key?('code') ? hash['code'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      updated_at = if hash.key?('updated_at')
                     (DateTimeHelper.from_rfc3339(hash['updated_at']) if hash['updated_at'])
                   else
                     SKIP
                   end

      # Create object from extracted values.
      GetOrderItemResponse.new(id,
                               type,
                               description,
                               amount,
                               quantity,
                               category,
                               code,
                               status,
                               created_at,
                               updated_at)
    end

    def to_custom_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_custom_updated_at
      DateTimeHelper.to_rfc3339(updated_at)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, type: #{@type}, description: #{@description}, amount:"\
      " #{@amount}, quantity: #{@quantity}, category: #{@category}, code: #{@code}, status:"\
      " #{@status}, created_at: #{@created_at}, updated_at: #{@updated_at}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, type: #{@type.inspect}, description:"\
      " #{@description.inspect}, amount: #{@amount.inspect}, quantity: #{@quantity.inspect},"\
      " category: #{@category.inspect}, code: #{@code.inspect}, status: #{@status.inspect},"\
      " created_at: #{@created_at.inspect}, updated_at: #{@updated_at.inspect}>"
    end
  end
end
