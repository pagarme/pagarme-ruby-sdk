# pagarme_api_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'create_register_information_base_request'

module PagarmeApiSdk
  # CreateRegisterInformationCorporationRequest Model.
  class CreateRegisterInformationCorporationRequest < CreateRegisterInformationBaseRequest
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :company_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :trading_name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :annual_revenue

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :corporation_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :founding_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cnae

    # TODO: Write general description for this method
    # @return [Array[CreateManagingPartnerRequest]]
    attr_accessor :managing_partners

    # TODO: Write general description for this method
    # @return [CreateRegisterInformationAddressRequest]
    attr_accessor :main_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['company_name'] = 'company_name'
      @_hash['trading_name'] = 'trading_name'
      @_hash['annual_revenue'] = 'annual_revenue'
      @_hash['corporation_type'] = 'corporation_type'
      @_hash['founding_date'] = 'founding_date'
      @_hash['cnae'] = 'cnae'
      @_hash['managing_partners'] = 'managing_partners'
      @_hash['main_address'] = 'main_address'
      @_hash = super().merge(@_hash)
      @_hash
    end

    # An array for optional fields
    def self.optionals
      _arr = %w[
        corporation_type
        founding_date
        cnae
      ]
      (_arr << super()).flatten!
    end

    # An array for nullable fields
    def self.nullables
      _arr = %w[
        corporation_type
        founding_date
        cnae
      ]
      (_arr << super()).flatten!
    end

    def initialize(company_name = nil, trading_name = nil, annual_revenue = nil,
                   managing_partners = nil, main_address = nil, email = nil,
                   document = nil, type = nil, phone_numbers = nil,
                   corporation_type = SKIP, founding_date = SKIP, cnae = SKIP,
                   site_url = SKIP)
      @company_name = company_name
      @trading_name = trading_name
      @annual_revenue = annual_revenue
      @corporation_type = corporation_type unless corporation_type == SKIP
      @founding_date = founding_date unless founding_date == SKIP
      @cnae = cnae unless cnae == SKIP
      @managing_partners = managing_partners
      @main_address = main_address

      # Call the constructor of the base class
      super(email,
            document,
            type,
            phone_numbers,
            site_url)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      company_name = hash.key?('company_name') ? hash['company_name'] : nil
      trading_name = hash.key?('trading_name') ? hash['trading_name'] : nil
      annual_revenue =
        hash.key?('annual_revenue') ? hash['annual_revenue'] : nil
      # Parameter is an array, so we need to iterate through it
      managing_partners = nil
      unless hash['managing_partners'].nil?
        managing_partners = []
        hash['managing_partners'].each do |structure|
          managing_partners << (CreateManagingPartnerRequest.from_hash(structure) if structure)
        end
      end

      managing_partners = nil unless hash.key?('managing_partners')
      main_address = CreateRegisterInformationAddressRequest.from_hash(hash['main_address']) if
        hash['main_address']
      email = hash.key?('email') ? hash['email'] : nil
      document = hash.key?('document') ? hash['document'] : nil
      type = hash.key?('type') ? hash['type'] : nil
      # Parameter is an array, so we need to iterate through it
      phone_numbers = nil
      unless hash['phone_numbers'].nil?
        phone_numbers = []
        hash['phone_numbers'].each do |structure|
          phone_numbers << (CreateRegisterInformationPhoneRequest.from_hash(structure) if structure)
        end
      end

      phone_numbers = nil unless hash.key?('phone_numbers')
      corporation_type =
        hash.key?('corporation_type') ? hash['corporation_type'] : SKIP
      founding_date = hash.key?('founding_date') ? hash['founding_date'] : SKIP
      cnae = hash.key?('cnae') ? hash['cnae'] : SKIP
      site_url = hash.key?('site_url') ? hash['site_url'] : SKIP

      # Create object from extracted values.
      CreateRegisterInformationCorporationRequest.new(company_name,
                                                      trading_name,
                                                      annual_revenue,
                                                      managing_partners,
                                                      main_address,
                                                      email,
                                                      document,
                                                      type,
                                                      phone_numbers,
                                                      corporation_type,
                                                      founding_date,
                                                      cnae,
                                                      site_url)
    end
  end
end
