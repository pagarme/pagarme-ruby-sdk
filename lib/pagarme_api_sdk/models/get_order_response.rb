# pagarme_api_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module PagarmeApiSdk
  # Response object for getting an Order
  class GetOrderResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :code

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :amount

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :currency

    # Indicates whether the order is closed
    # @return [TrueClass | FalseClass]
    attr_accessor :closed

    # Indicates whether the order is closed
    # @return [Array[GetOrderItemResponse]]
    attr_accessor :items

    # Indicates whether the order is closed
    # @return [GetCustomerResponse]
    attr_accessor :customer

    # Indicates whether the order is closed
    # @return [String]
    attr_accessor :status

    # Indicates whether the order is closed
    # @return [DateTime]
    attr_accessor :created_at

    # Indicates whether the order is closed
    # @return [DateTime]
    attr_accessor :updated_at

    # Indicates whether the order is closed
    # @return [DateTime]
    attr_accessor :closed_at

    # Indicates whether the order is closed
    # @return [Array[GetChargeResponse]]
    attr_accessor :charges

    # Indicates whether the order is closed
    # @return [String]
    attr_accessor :invoice_url

    # Indicates whether the order is closed
    # @return [GetShippingResponse]
    attr_accessor :shipping

    # Indicates whether the order is closed
    # @return [Hash[String, String]]
    attr_accessor :metadata

    # Checkout Payment Settings Response
    # @return [Array[GetCheckoutPaymentResponse]]
    attr_accessor :checkouts

    # Ip address
    # @return [String]
    attr_accessor :ip

    # Session id
    # @return [String]
    attr_accessor :session_id

    # Location
    # @return [GetLocationResponse]
    attr_accessor :location

    # Device's informations
    # @return [GetDeviceResponse]
    attr_accessor :device

    # Device's informations
    # @return [GetIntegrationResponse]
    attr_accessor :integration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['code'] = 'code'
      @_hash['amount'] = 'amount'
      @_hash['currency'] = 'currency'
      @_hash['closed'] = 'closed'
      @_hash['items'] = 'items'
      @_hash['customer'] = 'customer'
      @_hash['status'] = 'status'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash['closed_at'] = 'closed_at'
      @_hash['charges'] = 'charges'
      @_hash['invoice_url'] = 'invoice_url'
      @_hash['shipping'] = 'shipping'
      @_hash['metadata'] = 'metadata'
      @_hash['checkouts'] = 'checkouts'
      @_hash['ip'] = 'ip'
      @_hash['session_id'] = 'session_id'
      @_hash['location'] = 'location'
      @_hash['device'] = 'device'
      @_hash['integration'] = 'integration'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        code
        amount
        currency
        closed
        items
        customer
        status
        created_at
        updated_at
        closed_at
        charges
        invoice_url
        shipping
        metadata
        checkouts
        ip
        session_id
        location
        device
        integration
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        id
        code
        amount
        currency
        closed
        items
        customer
        status
        created_at
        updated_at
        closed_at
        charges
        invoice_url
        shipping
        metadata
        checkouts
        ip
        session_id
        location
        device
        integration
      ]
    end

    def initialize(id = SKIP, code = SKIP, amount = SKIP, currency = SKIP,
                   closed = SKIP, items = SKIP, customer = SKIP, status = SKIP,
                   created_at = SKIP, updated_at = SKIP, closed_at = SKIP,
                   charges = SKIP, invoice_url = SKIP, shipping = SKIP,
                   metadata = SKIP, checkouts = SKIP, ip = SKIP,
                   session_id = SKIP, location = SKIP, device = SKIP,
                   integration = SKIP)
      @id = id unless id == SKIP
      @code = code unless code == SKIP
      @amount = amount unless amount == SKIP
      @currency = currency unless currency == SKIP
      @closed = closed unless closed == SKIP
      @items = items unless items == SKIP
      @customer = customer unless customer == SKIP
      @status = status unless status == SKIP
      @created_at = created_at unless created_at == SKIP
      @updated_at = updated_at unless updated_at == SKIP
      @closed_at = closed_at unless closed_at == SKIP
      @charges = charges unless charges == SKIP
      @invoice_url = invoice_url unless invoice_url == SKIP
      @shipping = shipping unless shipping == SKIP
      @metadata = metadata unless metadata == SKIP
      @checkouts = checkouts unless checkouts == SKIP
      @ip = ip unless ip == SKIP
      @session_id = session_id unless session_id == SKIP
      @location = location unless location == SKIP
      @device = device unless device == SKIP
      @integration = integration unless integration == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      code = hash.key?('code') ? hash['code'] : SKIP
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP
      closed = hash.key?('closed') ? hash['closed'] : SKIP
      # Parameter is an array, so we need to iterate through it
      items = nil
      unless hash['items'].nil?
        items = []
        hash['items'].each do |structure|
          items << (GetOrderItemResponse.from_hash(structure) if structure)
        end
      end

      items = SKIP unless hash.key?('items')
      customer = GetCustomerResponse.from_hash(hash['customer']) if hash['customer']
      status = hash.key?('status') ? hash['status'] : SKIP
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      updated_at = if hash.key?('updated_at')
                     (DateTimeHelper.from_rfc3339(hash['updated_at']) if hash['updated_at'])
                   else
                     SKIP
                   end
      closed_at = if hash.key?('closed_at')
                    (DateTimeHelper.from_rfc3339(hash['closed_at']) if hash['closed_at'])
                  else
                    SKIP
                  end
      # Parameter is an array, so we need to iterate through it
      charges = nil
      unless hash['charges'].nil?
        charges = []
        hash['charges'].each do |structure|
          charges << (GetChargeResponse.from_hash(structure) if structure)
        end
      end

      charges = SKIP unless hash.key?('charges')
      invoice_url = hash.key?('invoice_url') ? hash['invoice_url'] : SKIP
      shipping = GetShippingResponse.from_hash(hash['shipping']) if hash['shipping']
      metadata = hash.key?('metadata') ? hash['metadata'] : SKIP
      # Parameter is an array, so we need to iterate through it
      checkouts = nil
      unless hash['checkouts'].nil?
        checkouts = []
        hash['checkouts'].each do |structure|
          checkouts << (GetCheckoutPaymentResponse.from_hash(structure) if structure)
        end
      end

      checkouts = SKIP unless hash.key?('checkouts')
      ip = hash.key?('ip') ? hash['ip'] : SKIP
      session_id = hash.key?('session_id') ? hash['session_id'] : SKIP
      location = GetLocationResponse.from_hash(hash['location']) if hash['location']
      device = GetDeviceResponse.from_hash(hash['device']) if hash['device']
      integration = GetIntegrationResponse.from_hash(hash['integration']) if hash['integration']

      # Create object from extracted values.
      GetOrderResponse.new(id,
                           code,
                           amount,
                           currency,
                           closed,
                           items,
                           customer,
                           status,
                           created_at,
                           updated_at,
                           closed_at,
                           charges,
                           invoice_url,
                           shipping,
                           metadata,
                           checkouts,
                           ip,
                           session_id,
                           location,
                           device,
                           integration)
    end

    def to_custom_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_custom_updated_at
      DateTimeHelper.to_rfc3339(updated_at)
    end

    def to_custom_closed_at
      DateTimeHelper.to_rfc3339(closed_at)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, code: #{@code}, amount: #{@amount}, currency: #{@currency},"\
      " closed: #{@closed}, items: #{@items}, customer: #{@customer}, status: #{@status},"\
      " created_at: #{@created_at}, updated_at: #{@updated_at}, closed_at: #{@closed_at}, charges:"\
      " #{@charges}, invoice_url: #{@invoice_url}, shipping: #{@shipping}, metadata: #{@metadata},"\
      " checkouts: #{@checkouts}, ip: #{@ip}, session_id: #{@session_id}, location: #{@location},"\
      " device: #{@device}, integration: #{@integration}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, code: #{@code.inspect}, amount: #{@amount.inspect},"\
      " currency: #{@currency.inspect}, closed: #{@closed.inspect}, items: #{@items.inspect},"\
      " customer: #{@customer.inspect}, status: #{@status.inspect}, created_at:"\
      " #{@created_at.inspect}, updated_at: #{@updated_at.inspect}, closed_at:"\
      " #{@closed_at.inspect}, charges: #{@charges.inspect}, invoice_url: #{@invoice_url.inspect},"\
      " shipping: #{@shipping.inspect}, metadata: #{@metadata.inspect}, checkouts:"\
      " #{@checkouts.inspect}, ip: #{@ip.inspect}, session_id: #{@session_id.inspect}, location:"\
      " #{@location.inspect}, device: #{@device.inspect}, integration: #{@integration.inspect}>"
    end
  end
end
