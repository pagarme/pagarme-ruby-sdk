# pagarme_api_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'create_register_information_base_request'

module PagarmeApiSdk
  # CreateRegisterInformationIndividualRequest Model.
  class CreateRegisterInformationIndividualRequest < CreateRegisterInformationBaseRequest
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :mother_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :birthdate

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :monthly_income

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :professional_occupation

    # TODO: Write general description for this method
    # @return [CreateRegisterInformationAddressRequest]
    attr_accessor :address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['mother_name'] = 'mother_name'
      @_hash['birthdate'] = 'birthdate'
      @_hash['monthly_income'] = 'monthly_income'
      @_hash['professional_occupation'] = 'professional_occupation'
      @_hash['address'] = 'address'
      @_hash = super().merge(@_hash)
      @_hash
    end

    # An array for optional fields
    def self.optionals
      _arr = %w[
        mother_name
      ]
      (_arr << super()).flatten!
    end

    # An array for nullable fields
    def self.nullables
      _arr = %w[
        mother_name
      ]
      (_arr << super()).flatten!
    end

    def initialize(name = nil,
                   birthdate = nil,
                   monthly_income = nil,
                   professional_occupation = nil,
                   address = nil,
                   email = nil,
                   document = nil,
                   type = nil,
                   phone_numbers = nil,
                   mother_name = SKIP,
                   site_url = SKIP)
      @name = name
      @mother_name = mother_name unless mother_name == SKIP
      @birthdate = birthdate
      @monthly_income = monthly_income
      @professional_occupation = professional_occupation
      @address = address

      # Call the constructor of the base class
      super(email,
            document,
            type,
            phone_numbers,
            site_url)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      birthdate = hash.key?('birthdate') ? hash['birthdate'] : nil
      monthly_income =
        hash.key?('monthly_income') ? hash['monthly_income'] : nil
      professional_occupation =
        hash.key?('professional_occupation') ? hash['professional_occupation'] : nil
      address = CreateRegisterInformationAddressRequest.from_hash(hash['address']) if
        hash['address']
      email = hash.key?('email') ? hash['email'] : nil
      document = hash.key?('document') ? hash['document'] : nil
      type = hash.key?('type') ? hash['type'] : nil
      # Parameter is an array, so we need to iterate through it
      phone_numbers = nil
      unless hash['phone_numbers'].nil?
        phone_numbers = []
        hash['phone_numbers'].each do |structure|
          phone_numbers << (CreateRegisterInformationPhoneRequest.from_hash(structure) if structure)
        end
      end

      phone_numbers = nil unless hash.key?('phone_numbers')
      mother_name = hash.key?('mother_name') ? hash['mother_name'] : SKIP
      site_url = hash.key?('site_url') ? hash['site_url'] : SKIP

      # Create object from extracted values.
      CreateRegisterInformationIndividualRequest.new(name,
                                                     birthdate,
                                                     monthly_income,
                                                     professional_occupation,
                                                     address,
                                                     email,
                                                     document,
                                                     type,
                                                     phone_numbers,
                                                     mother_name,
                                                     site_url)
    end
  end
end
